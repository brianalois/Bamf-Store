export declare class Model {
    static model_name: string;
    static all_data: Array<object>;
    static SCHEMA: Object;
    constructor(obj_data: any);
    getModelName(): any;
    toObject(): any;
    uniqueQueryIdentifier(): any;
    uniqueIdName(): any;
    uniqueId(): any;
    save(): void;
    remove(): void;
    reload(): void;
    getStorageValues(): any;
    getInstanceValues(): any;
    getPropertyDifferences(): any;
    storageDifference(): any;
    instanceDifference(): any;
    static _instances: Array<Model>;
    static describe(): Array<string>;
    static setlocalStorage(name: string, data: Object): void;
    static getlocalStorage(name: string): Object;
    static removeLocalStorage(name: string): void;
    static getModelName(): string;
    static removeAllData(): void;
    static setAllData(data: Array<Object>): void;
    static getAllData(): any;
    static getPrimaryKey(): string;
    static getSchema(): any;
    static schemaValidate(data: any): any;
    static instantiateObject(obj_data: any, single?: boolean): any;
    static create(data: any, single?: boolean): any;
    static removeInstance(search: object): void;
    static removeStorage(search: object): void;
    static remove(search: object): void;
    static update(search: object, new_data?: any, single?: boolean): null | undefined;
    static updateOne(search: object, new_data: any, single?: boolean): any;
    static findOne(search?: object, single?: boolean): any;
    static find(search: object, single?: boolean): any[];
    static findOneAndUpdate(search: object, data?: any, options?: any): any;
    static findById(id: string, single?: boolean): any;
    static difference(a: any, b: any): any;
    static _events: any;
    static on(events: any, listener?: Function): (() => void) | undefined;
    static emit(events: any, data?: any): void;
    _events: any;
    on(events: any, listener?: Function): (() => void) | undefined;
    emit(events: any, data?: any): void;
}
